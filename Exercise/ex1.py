class Backpack:     """    A Backpack object class. Has a name and a list of contents.    Attributes:      name (str): the name of the backpack's owner. contents (list): the contents of the backpack.      Init docstring:          Set the name and initialize an empty contents list.          Inputs:              name (str): the name of the backpack's owner.              Returns:                  A backpack object wth no contents.    """    def __init__(self, name:str, color:str, max_size:int = 5):        self.name = name        self.color = color        self.max_size = max_size        self.contents = []    def put(self, item):        if len(self.contents) == self.max_size:            print("No Room!")                    else:             self.contents.append(item)    def take(self, item):        self.contents.remove(item)    def dump(self):        self.contents.clear()    def __add__(self, other):        return len(self.contents) + len(other.contents)    def __lt__(self, other):        return len(self.contents) < len(other.contents)    def __eq__(self, other):        return self.name == other.name and self.color == other.color and len(self.contents) == len(other.contents)        def __str__(self):        return '\n'.join(f"{attr}: {value}" for attr, value in self.__dict__.items())                # content_str = ''        # for i, item in enumerate(self.contents):        #     if i == len(self.contents)-1:        #         content_str += item        #     else:        #         content_str += item + ','        # return f"Owner: {self.name} \nColor: {self.color} \nSize: {len(self.contents)} \nMax Size: {self.max_size} \nContents:[{content_str}] "my_backpack = Backpack("Fred", "red")my_backpacktwo = Backpack("Fred", "red")# Access the object's attributes with a period and the attribute name. >>> my_backpack.name# print(my_backpack.contents)# print(my_backpack == my_backpacktwo)# The object's attributes can be modified dynamically. >>> my_backpack.name = "George"# print(my_backpack.name)my_backpack.put("notebook")my_backpack.put("pencils")print(my_backpack)my_backpack.take("pencils")# print(my_backpack.contents)# print(my_backpack == my_backpacktwo)def test_backpack():        testpack = Backpack("Barry", "black")       # Instantiate the object.    if testpack.max_size != 5:                  # Test an attribute.        print("Wrong default max_size!")    for item in ["pencil", "pen", "paper", "computer"]:        testpack.put(item)                      # Test a method.    print(testpack.contents)    testpack.dump()    print(testpack.contents)test_backpack()class Knapsack(Backpack):    def __init__(self, name, color, max_size=3):        super().__init__(name, color, max_size)        self.closed = True            def put(self, item):        if self.closed :            print("I'm closed!")        else:            super().put(item)    def take(self, item):        if self.closed:            print("I'm closed!")        else:            super().take(item)            my_knapsack = Knapsack("Brady", "brown")isinstance(my_knapsack, Backpack)       # A Knapsack is a Backpack.# The put() and take() method now require the knapsack to be open.my_knapsack.put('compass') # Open the knapsack and put in some items.my_knapsack.closed = Falsemy_knapsack.put("compass")my_knapsack.put("pocket knife") print(my_knapsack.contents)# The dump method is inherited from the Backpack class, and# can be used even though it is not defined in the Knapsack class.#my_knapsack.dump()print(my_knapsack.contents)class Jetpack(Backpack):    def __init__(self, name, color, max_size=2, amount_fuel = 10):        super().__init__(name, color, max_size)        self.amount_fuel = amount_fuel                    def fly(self,amount_fuel):                if amount_fuel > self.amount_fuel:            print("Not enough fuel!")        else:            self.amount_fuel -= amount_fuel                def dump(self):         super().dump()         self.amount_fuel = 0    def __repr__(self):        return f"{self.amount_fuel = }"my_jetpack = Jetpack("silly", "magenta")my_jetpack.fly(5)print(my_jetpack)my_jetpack.fly(23)#my_jetpack.dump()print(my_backpack.__doc__)print(my_knapsack + my_jetpack)print(my_knapsack < my_jetpack)print(my_knapsack > my_jetpack)print(my_backpack != my_backpacktwo)        